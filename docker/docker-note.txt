--------------------------------------------------
-- Ссылки
-----
https://hub.docker.com
https://docs.docker.com/engine/reference/commandline

https://github.com/wsargent/docker-cheat-sheet/tree/master/ru

--------------------------------------------------
-- Концепция
-----

-- Образ 
- аналогия - ISO-образ.
- аналогия - базовый диск VirtualBox (без снапшотов), с которого запускаемся
Обычно хранятся на dockerhub и тянутся для использования локально.

-- Контейнер 
- Аналогия - снапшоты VirtualBox + текущее состояние.
- Хранит данные, которые образовались после использования образа.
Например, хотим установить "mc" на базе образа "ubuntu"
Запускаем команду.
$ docker run ubuntu:latest apt install mc
1. С dockerhub скачается образ "ubuntu:latest" и разместится где-то в служебны

--------------------------------------------------
-- Жизненный цикл
---- создает контейнер, но не запускает его.
$ docker create 
---- позволяет переименовать контейнер.
$ docker rename
---- создает и запускает контейнер за одну операцию.
$ docker run
---- удаляет контейнер.
$ docker rm 
---- обновляет ограничения ресурсов контейнера.
$ docker update

-- Запуск и остановка
----  запускает контейнер, чтобы он работал.
$ docker start
----  останавливает запущенный контейнер.
$ docker stop
---- останавливается и запускает контейнер.
$ docker restart 
----  приостанавливает работу контейнера, "замораживает" его на месте.
$ docker pause
----  снимает "заморозку" контейнера.
$ docker unpause
----  блокирует до остановки контейнера.
$ docker wait
----  посылает SIGKILL к запущеннному контейнеру.
$ docker kill
----  будет подключаться к работающему контейнеру.
$ docker attach


--  для выполнения команды в контейнере.
$ docker exec

-- Импорт / Экспорт
---- копирует файлы или папки между контейнером и локальной файловой системой.
$ docker cp 
---- экспортировать файловую систему контейнера в качестве tar-архива.
$ docker export


--------------------------------------------------
-- Примеры
----- 

-- Запустить команду "uname -a" в среде образа "ubuntu:latest"
--> Каждый запуск будет создавать новый контейнер, что приводит к замусориванию диска
--> Чтобы избежать замусоривания, нужно добавить --rm
$ docker run ubuntu:latest uname -a
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
7ddbc47eeb70: Pull complete 
c1bbdc448b72: Pull complete 
8c3b70e39044: Pull complete 
45d437916d57: Pull complete 
Digest: sha256:6e9f67fa63b0323e9a1e587fd71c561ba48a034504fb804fd26fd8800039835d
Status: Downloaded newer image for ubuntu:latest

Linux c1359dc04594 4.15.0-70-generic #79-Ubuntu SMP Tue Nov 12 10:36:11 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

-- Запустить команду "ls" в среде образа "ubuntu:latest" и удалить контейнер после завершения
--> 1. При запуске будет создан контейнер.
--> 2. Затем внутри него выполнится "$ ls". Т.е. выведенный листинг покажет файлы внутри виртуалки.
--> 3. Затем будет удален контейнер, созданный на шаге "1."
$ docker run --rm ubuntu:latest ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

-- Запустить команду "bash" в среде образа "ubuntu:latest" в интерактивном режиме
--> и удалить контейнер после завершения
--> В результате мы получаем терминал, который выполняется в виртуальной среде.
--> Таким образм мы можем исследовать внутренности, устанавливать и удалять программы, копировать и удалять файлы.
---> В данном примере внутри виртуалки выполнены команды:
---> 1. ls
---> 2. ll
---> 3. cat /etc/issue
---> 4. exit
$ docker run --rm -ti ubuntu:latest bash
root@7e2c18a4ac42:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@7e2c18a4ac42:/# ll
total 72
drwxr-xr-x   1 root root 4096 Dec 13 15:35 ./
drwxr-xr-x   1 root root 4096 Dec 13 15:35 ../
-rwxr-xr-x   1 root root    0 Dec 13 15:35 .dockerenv*
drwxr-xr-x   2 root root 4096 Oct 29 21:25 bin/
drwxr-xr-x   2 root root 4096 Apr 24  2018 boot/
drwxr-xr-x   5 root root  360 Dec 13 15:35 dev/
drwxr-xr-x   1 root root 4096 Dec 13 15:35 etc/
drwxr-xr-x   2 root root 4096 Apr 24  2018 home/
drwxr-xr-x   8 root root 4096 May 23  2017 lib/
drwxr-xr-x   2 root root 4096 Oct 29 21:25 lib64/
drwxr-xr-x   2 root root 4096 Oct 29 21:25 media/
drwxr-xr-x   2 root root 4096 Oct 29 21:25 mnt/
drwxr-xr-x   2 root root 4096 Oct 29 21:25 opt/
dr-xr-xr-x 360 root root    0 Dec 13 15:35 proc/
drwx------   2 root root 4096 Oct 29 21:25 root/
drwxr-xr-x   1 root root 4096 Oct 31 22:20 run/
drwxr-xr-x   1 root root 4096 Oct 31 22:20 sbin/
drwxr-xr-x   2 root root 4096 Oct 29 21:25 srv/
dr-xr-xr-x  13 root root    0 Dec 13 15:35 sys/
drwxrwxrwt   2 root root 4096 Oct 29 21:25 tmp/
drwxr-xr-x   1 root root 4096 Oct 29 21:25 usr/
drwxr-xr-x   1 root root 4096 Oct 29 21:25 var/
root@7e2c18a4ac42:/# cat /etc/issue
Ubuntu 18.04.3 LTS \n \l
root@7e2c18a4ac42:/# exit
exit

-- Запустить команду "bash" в среде образа "ubuntu:latest" в интерактивном режиме,
--> прилинковать внутрь виртуалки папку (внутри "/app/mounted-dir", снаружи "/var/www/5-edu/docker/dirs-for-mount")
--> и удалить контейнер после завершения
-->
---> В данном примере внутри виртуалки выполнены команды:
---> 1. find app
----> Показывает ысе файлы, которые находятся внутри вмртуалки в папке "/app/"
---> 2. cat app/mounted-dir/readme.txt
----> Выводит содержимое файла. Внутри виртуалки         "app/mounted-dir/readme.txt" 
----> Снаружи этот файл находится в "/var/www/5-edu/docker/dirs-for-mount/readme.txt"
-- Вариант 1.
$ docker run --rm -ti -v /var/www/5-edu/docker/dirs-for-mount/:/app/mounted-dir ubuntu:latest bash
-- Вариант 2.
$ cd  /var/www/5-edu/docker/dirs-for-mount
$ docker run --rm -ti (pwd):/app/mounted-dir
--
root@a7aa1bd7665f:/# find app
app
app/mounted-dir
app/mounted-dir/readme.txt
root@a7aa1bd7665f:/# cat app/mounted-dir/readme.txt 
Это тестовая директория для монтирования каталогов внутрь образов.
Реально находится в "/var/www/5-edu/docker/dirs-for-mount/"
Внутри образа монтировать будем в "/app/.."
-- Дополнение.  Информация о контейнере.
--> 1. Пока висит bash, контейнер можно найти.
$ docker ps -a
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS                     PORTS                                      NAMES
a7aa1bd7665f        ubuntu:latest                        "bash"                   2 hours ago         Up 2 hours                                                            wonderful_dewdney
--> 2. Полная информация о контейнере.
$ docker inspect  a7aa1bd7665f
... много данных ...
--> 3. Смотрим какие папки примонтированы (частичная выборка информации).
$ docker inspect  --format '{{ .Mounts }}' a7aa1bd7665f
[{bind  /var/www/5-edu/docker/dirs-for-mount /app/mounted-dir   true rprivate}]






--------------------------------------------------
