#--------------------------------------------------------------------------------------
# В этом файле цепочки команд (если команда одна, то для нее запись в отдельном файле, 
# который является шпаргалкой по этой команде).
#--------------------------------------------------------------------------------------
# Имеем большой "php.log" 
# В нем много "PHP Fatal error:", "PHP Notice:" и т.д.
# Нужно вытащить уникальные строки, посчитать количество уникальных, отсортировать по частоте встречания
# 
# Строки следующей структуры:
# [21-Dec-2019 14:27:52 UTC] PHP Notice:  Undefined index: PERSON in /usr/local/zend/var/apps/http/my-site.local/80/1.0.0.4491/application/modules/app/controllers/MyTestController.php on line 70
# 
# На выходе должно быть
# <count> PHP Notice:  Undefined index: PERSON in /usr/local/zend/var/apps/http/my-site.local/80/1.0.0.4491/application/modules/app/controllers/MyTestController.php on line 70
#----

# 1. egrep - выбирает строки, которые начинаются как дата, напр. "[21-Dec-2019"
# 2. cut   - выбирает из результата п"1." строки с позиции 32 и до конца строки
#            -c 32 - вырезать с позиции 32 и до конца строки
# 3. sort  - сортирует строки п"2.", чтобы их могла посчитать следующая команда
# 4. uniq  - выбирает уникальные строки п"3." и считает их количество. Количество выводится в начале строки.
#            -c - посчитать количество
# 5. sort  - сортирует строки п"4". Т.к. количество в начале, то получим сортировку по количеству.
#            -r - вывести в обратном порядке
#            -n - рассматривать текст, как число
#            -k 1 - для сортировки использовать первый столбец. По умолчанию, разделитель столбцов пробел.
egrep "\[[0-9]{2}-[a-zA-Z]{3}-[0-9]{4}" php.log | cut -c 32- | sort | uniq -c | sort -r -nk 1 > php-log-stat.txt

#--------------------------------------------------------------------------------------
# Поймать в логе строки по ключу "LBUID", отсечь динамическую часть (до ключа) и вывести 
# уникальные строки лога с указанием количества
#---
grep "LBUID" development.log|awk '{pos=index($0, "LBUID"); $0=substr($0, pos + 20); print $0}'| sort | uniq -c

#--------------------------------------------------------------------------------------
# Диагностика неполадок при запуске приложений
#-----

# Проверить грузитс я ли динамическая библиотека.
# Если чего-то не хватает, то будет написано "*.so => not found"
ldd /usr/local/lib/php/extensions/no-debug-non-zts-20210902/oci8.so
#>        linux-vdso.so.1 (0x00007ffcb273f000)
#>        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fedace4e000)
#>        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fedacd0a000)
#>        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fedacb45000)
#>        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fedacb2b000)
#>        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fedacb25000)
#        /lib64/ld-linux-x86-64.so.2 (0x00007fedad308000)

# Проверить считываются ли конфиги PHP
# Для запуска нужно установить в систему "strace"
strace -f -e trace=open php --ini
